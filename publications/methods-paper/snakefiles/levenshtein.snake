def trio_tailpuller_input(w):
    return {
        subject: f"{DATA_DIR}/PacBio/{w.group}/{subject}/tailpuller.bam"
        for subject in set(DATASETS.loc[DATASETS["group"]==w.group, "subject"])
    }

rule trio_tailpuller:
    input: unpack(trio_tailpuller_input),
    output: bam=DATA_DIR+"/PacBio/{group}/tailpuller.bam",
    params: sam=DATA_DIR+"/PacBio/{group}/tailpuller.sam", flags="-f0x4000",
    run:
        first_bam = next(iter(input))
        shell("samtools view -H {first_bam} > {params.sam}")
        for subject, bam in input.items():
            shell("""
                samtools view {params.flags} {bam} \
                    | sed -E 's/^/{subject}:/g' >> {params.sam}
            """)
        shell("samtools view -bh {params.sam} > {output.bam}")
        shell("rm {params.sam}")


rule trio_kmerscanner:
    input:
        bam=DATA_DIR+"/PacBio/{group}/tailpuller.bam",
        tsv=DATA_DIR+"/PacBio/repeatfinder-{arm}.tsv",
    output:
        dat=DATA_DIR+"/PacBio/{group}/kmerscanner-{arm}.dat.gz",
    params:
        tsv=DATA_DIR+"/PacBio/{group}/repeatfinder-{arm}.tsv",
    run:
        flags = get_sam_flags(wildcards.arm, target="tract_anchor")
        shell("""
            sed -E 's/#monomer/#motif/g' {input.tsv} > {params.tsv};
            ./edgecase kmerscanner --motif-file {params.tsv} -w 10 \
                {flags} {input.bam} | gzip -2 > {output.dat};
            rm -f {params.tsv}
        """)
