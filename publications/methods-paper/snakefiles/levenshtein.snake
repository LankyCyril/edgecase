def trio_tailpuller_input(w):
    return {
        subject: f"{DATA_DIR}/PacBio/{w.group}/{subject}/tailpuller.bam"
        for subject in set(DATASETS.loc[DATASETS["group"]==w.group, "subject"])
    }

rule trio_tailpuller:
    input: unpack(trio_tailpuller_input),
    output: bam=DATA_DIR+"/PacBio/{group}/tailpuller.bam",
    params: sam=DATA_DIR+"/PacBio/{group}/tailpuller.sam", flags="-f0x4000",
    run:
        first_bam = next(iter(input))
        shell("samtools view -H {first_bam} > {params.sam}")
        for subject, bam in input.items():
            shell("""
                samtools view {params.flags} {bam} \
                    | sed -E 's/^/{subject}:/g' >> {params.sam}
            """)
        shell("samtools view -bh {params.sam} > {output.bam}")
        shell("rm {params.sam}")


rule trio_kmerscanner:
    input:
        bam=DATA_DIR+"/PacBio/{group}/tailpuller.bam",
        tsv=DATA_DIR+"/PacBio/repeatfinder-{arm}-plottable.tsv",
    output:
        dat=DATA_DIR+"/PacBio/{group}/kmerscanner-{arm}.dat.gz",
    run:
        flags = get_sam_flags(wildcards.arm, target="tract_anchor")
        shell("""
            ./edgecase kmerscanner --motif-file {input.tsv} -w 10 \
                {flags} {input.bam} | gzip -2 > {output.dat}
        """)


rule trio_levenshtein:
    input:
        bam=DATA_DIR+"/PacBio/{group}/tailpuller.bam",
        dat=DATA_DIR+"/PacBio/{group}/kmerscanner-{arm}.dat.gz",
    output:
        tsv=DATA_DIR+"/PacBio/{group}/haplotypes/levenshtein-{arm}.tsv",
    params:
        directory=DATA_DIR+"/PacBio/{group}/haplotypes",
    run:
        flags = get_sam_flags(wildcards.arm, target="tract_anchor")
        shell("""
            mkdir {params.directory} 2>/dev/null || :
            ./edgecase levenshtein {flags} --kmerscanner-file {input.dat} \
                --output-dir {params.directory} {input.bam} \
                > {output.tsv}
        """)
