BOOTSTRAP_W = 10


rule kmerscan_for_bootstrap:
    """Performs kmerscan with a different window size (BOOTSTRAP_W) for further bootstrapping.
    Note: for visualization in densityplots, we ended up relying on seaborn's internal bootstrapping procedures, which are identical
    to the ones outlined here."""
    input:
        bam="data/datasets/GIAB/PacBio/{sample}-tailpuller.bam",
        tsv="data/datasets/GIAB/PacBio/repeatfinder-paper-{arm}.tsv"
    output:
        dat="data/datasets/GIAB/PacBio/{sample}-bootstrap/kmerscanner-{arm}.dat.gz"
    run:
        shell_flags, _ = get_sam_flags(wildcards.arm)
        shell("""
            ./edgecase kmerscanner -w {BOOTSTRAP_W} {shell_flags} \
                --motif-file {input.tsv} {input.bam} | gzip -2 > {output.dat}
        """)


def bootstrap_margin(bdf, n_boot, ci_f, dropna=True):
    """stackoverflow.com/a/38667081"""
    bdf_wide = bdf.set_index("name").iloc[:,8:].copy()
    N = len(bdf_wide)
    boot_means = concat(
        objs=[bdf_wide.iloc[choice(N, N)].mean(axis=0) for _ in range(n_boot)],
        axis=1
    )
    sorted_boot_means = sort(boot_means.values, axis=1)
    bdf_wide_mean = bdf_wide.mean(axis=0).values
    low = sorted_boot_means[:,int(n_boot*(1-ci_f)/2)]
    high = sorted_boot_means[:,int(n_boot*(1+ci_f)/2)]
    weight = (~bdf_wide.isnull()).sum(axis=0)
    margins = DataFrame(
        data=array([bdf_wide_mean, (high-low)/2, weight]).T,
        columns=["mean", "margin", "weight"],
        index=bdf_wide.columns
    )
    if dropna:
        return margins.dropna(how="any", axis=0)
    else:
        return margins


rule bootstrap_per_sample:
    """Performs bootstrapping"""
    input: dat="data/datasets/GIAB/PacBio/{sample}-bootstrap/kmerscanner-{arm}.dat.gz"
    output: tsv="data/datasets/GIAB/PacBio/{sample}-bootstrap/bootstrap-{arm}.tsv.gz"
    params: n_boot=1000, ci_f=.95
    run:
        _, samfilters = get_sam_flags(wildcards.arm)
        ks = load_kmerscan(
            input.dat, gzipped=True, samfilters=samfilters, bin_size=BOOTSTRAP_W
        )
        with gzopen(output.tsv, mode="wt") as tsv:
            header = ["mean", "margin", "weight", "chrom", "motif", "arm"]
            print(*header, sep="\t", file=tsv)
            for chrom, bdf in progressbar(ks.items(), desc="Bootstrapping"):
                for motif in bdf["motif"].drop_duplicates():
                    margins = bootstrap_margin(
                        bdf[bdf["motif"]==motif], params.n_boot, params.ci_f
                    )
                    margins["chrom"], margins["motif"], margins["arm"] = (
                        chrom, motif, wildcards.arm[0]
                    )
                    margins_repr = margins.to_csv(
                        sep="\t", index=False, header=False
                    )
                    print(margins_repr.rstrip(), file=tsv)


def filter_margins(margins, arm, zeros_action="keep"):
    """Not used"""
    if zeros_action == "keep":
        margins_filtered = margins
    elif zeros_action == "trim":
        margins_groupby = margins.groupby(
            ["chrom", "motif", "arm"], as_index=False
        )
        margins_filtered = margins_groupby.apply(
            lambda block: block.loc[trim_zeros(block["mean"]).index,:]
        )
    elif zeros_action == "remove":
        margins_filtered = margins[margins["mean"]!=0]
    else:
        raise ValueError("Unknown `zeros_action`: '{}'".format(zeros_action))
    return margins_filtered[
        margins_filtered["arm"]==arm
    ].dropna(how="any", axis=0)


rule bootstrap_combined:
    """Combines bootstraps for multiple samples into one dataframe; not used in the paper"""
    input:
        tsvs=expand(
            "data/datasets/GIAB/PacBio/{sample}-bootstrap/bootstrap-{arm}.tsv.gz",
            sample=PACBIO_NAME_TO_SAMPLE.values(), arm=["p_arm", "q_arm"]
        )
    output:
        tsv="data/datasets/GIAB/PacBio/bootstraps.tsv.gz"
    run:
        bootstraps = [
            read_csv(tsv, sep="\t").dropna(how="any", axis=0)
            for tsv in input.tsvs
        ]
        concat(bootstraps, axis=0).to_csv(
            output.tsv, compression="gzip", sep="\t", index=False
        )


rule bootstrap_median:
    """Visualizes values of bootstrap median; not used in the paper"""
    input: tsv="data/datasets/GIAB/PacBio/bootstraps.tsv.gz"
    output: pdf="data/datasets/GIAB/PacBio/bootstraps.pdf"
    params: weighted=False
    run:
        margins = read_csv(input.tsv, sep="\t")
        if params.weighted:
            med, q98 = (
                weighted_quantile(
                    margins["margin"].values, margins["weight"].values, q
                )
                for q in [.5, .98]
            )
        else:
            med, q98 = (margins["margin"].quantile(q) for q in [.5, .98])
        print(med, q98)
        switch_backend("pdf")
        figure, ax = subplots(figsize=(6, 2.4))
        kdeplot(
            data=margins["margin"], color="darkblue", shade=True,
            bw=.0035, cut=0,
            ax=ax, legend=False
        )
        ax.set(
            xlim=(0, .5), xlabel="95% margin of error of bootstrap",
            ylim=(0, ax.get_ylim()[1]),
            yticks=[], ylabel="kernel density estimate"
        )
        ax.plot([q98, q98], [0, .32], lw=2, ls=":", color="#F01000")
        figure.savefig(output.pdf, bbox_inches="tight")
