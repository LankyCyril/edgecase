from pysam import FastxFile
from matplotlib.pyplot import switch_backend, subplots
from collections import OrderedDict
from venn import venn, generate_petal_labels
from matplotlib_venn import venn3 as euler3
from tempfile import NamedTemporaryFile
from os import remove
switch_backend("Agg")

rule combined_hmmer_kmerscan:
    input:
        v1="data/hmmer/twins-ont-2018/{subject}-{timepoint}.fq",
        v2="data/hmmer/twins-ont-2019/{subject}-{timepoint}.fq"
    output:
        densities="data/kmers/combined/{subject}-{timepoint}-{kmer}.txt"
    params:
        edge_size=600,
        window_size=120,
        cutoff=.2 # use hard cutoff if int/float, GMM if False
    threads: 24
    run:
        if wildcards.kmer == "TTAGGG":
            test_mode = "--tail-test"
        elif wildcards.kmer == "CCCTAA":
            test_mode = "--head-test"
        else:
            raise ValueError("Unsupported kmer: {}".format(wildcards.kmer))
        if isinstance(params.cutoff, (int, float)):
            cutoff_mode = "--cutoff {}".format(params.cutoff)
        else:
            cutoff_mode = ""
        shell("""
            python kmer-scan.py -j {threads} \
                --kmer {wildcards.kmer} \
                --window-size {params.window_size} \
                {test_mode} {params.edge_size} \
                {cutoff_mode} \
                {input.v1} {input.v2} \
                > {output.densities}
        """)

def names_from_txt(filename):
    with open(filename) as txt:
        return [line.strip().split()[0] for line in txt]

def names_from_fq(filename):
    with FastxFile(filename) as fastx:
        return [read.name for read in fastx]

def get_read_sets(input):
    if hasattr(input, "kmerscan"):
        kmerscan = set(names_from_txt(input.kmerscan))
    else:
        kmerscan = (
            set(names_from_txt(input.kmerscan_TTAGGG)) |
            set(names_from_txt(input.kmerscan_CCCTAA))
        )
    return OrderedDict([
        ("kmerscan", kmerscan),
        ("basecomp", set(names_from_fq(input.basecomp))),
        ("hmmer", (
            set(names_from_fq(input.hmmer_v1)) |
            set(names_from_fq(input.hmmer_v2))
        ))
    ])

def euler_labels(read_sets):
    venn_labels = generate_petal_labels(read_sets.values())
    return [
        int(venn_labels[logic])
        for logic in ("100", "010", "110", "001", "101", "011", "111")
    ]

rule threeway_venn:
    input:
        kmerscan_TTAGGG="data/kmers/combined/{subject}-{timepoint}-TTAGGG.txt",
        kmerscan_CCCTAA="data/kmers/combined/{subject}-{timepoint}-CCCTAA.txt",
        basecomp="data/basecomp/{subject}-{timepoint}.fq",
        hmmer_v1="data/hmmer/twins-ont-2018/{subject}-{timepoint}.fq",
        hmmer_v2="data/hmmer/twins-ont-2019/{subject}-{timepoint}.fq"
    output:
        png="data/plots/{subject}-{timepoint}/{diagram_type}-diagram.png"
    params:
        figsize=(8, 8)
    run:
        read_sets = get_read_sets(input)
        figure, ax = subplots(figsize=params.figsize)
        if wildcards.diagram_type == "venn":
            venn(read_sets, ax=ax)
        elif wildcards.diagram_type == "euler":
            euler3(
                subsets=euler_labels(read_sets),
                set_labels=read_sets.keys(),
                ax=ax
            )
        else:
            raise ValueError("Unsupported diagram type")
        ax.set(title="{} {}".format(wildcards.subject, wildcards.timepoint))
        figure.savefig(output.png)

rule all_eulers:
    input:
        pngs=expand(
            "data/plots/{subject}-{timepoint}/euler.png",
            subject=["TW", "HR"],
            timepoint=["pre", "flight", "post"]
        )

rule TP_metrics_plot:
    input:
        kmerscan="data/kmers/combined/{subject}-{timepoint}-{kmer}.txt",
        basecomp="data/basecomp/{subject}-{timepoint}.fq",
        hmmer_v1="data/hmmer/twins-ont-2018/{subject}-{timepoint}.fq",
        hmmer_v2="data/hmmer/twins-ont-2019/{subject}-{timepoint}.fq"
    output:
        png="data/plots/{subject}-{timepoint}/tp-{kmer}.png"
    run:
        read_sets = get_read_sets(input)
        tp_names = set.intersection(*read_sets.values())
        with open(input.kmerscan) as kmerscan:
            with NamedTemporaryFile(delete=False, mode="wt") as tmp_txt:
                for line in map(str.strip, kmerscan):
                    if line.split()[0] in tp_names:
                        print(line, file=tmp_txt)
        if wildcards.kmer == "TTAGGG":
            align = "right"
        elif wildcards.kmer == "CCCTAA":
            align = "left"
        else:
            raise ValueError("Unsupported kmer: {}".format(wildcards.kmer))
        shell("""
            python plot-metric.py -a {align} --hide-names \
                {tmp_txt.name} > {output.png}
        """)
        os.remove(tmp_txt.name)
