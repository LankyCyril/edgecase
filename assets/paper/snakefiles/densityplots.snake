from pandas import read_csv
from io import StringIO
from subprocess import check_output
from gzip import open as gzopen
from matplotlib.pyplot import subplots, switch_backend


rule plottable_repeats:
    input:
        p_arm=DATA_DIR+"/PacBio/repeatfinder-p_arm.tsv",
        q_arm=DATA_DIR+"/PacBio/repeatfinder-q_arm.tsv",
    output:
        p_arm=DATA_DIR+"/PacBio/repeatfinder-p_arm-plottable.tsv",
        q_arm=DATA_DIR+"/PacBio/repeatfinder-q_arm-plottable.tsv",
    params:
        n=N_MOTIFS_TO_PLOT,
    run:
        for arm in "p_arm", "q_arm":
            rf = read_csv(
                getattr(input, arm), sep="\t",
                skiprows=1, usecols=[0]+list(range(8,15)),
            )
            top_rf = rf.rename(columns={"#monomer": "#motif"})[:params.n].copy()
            top_rf["score"] = (
                top_rf.drop(columns=["#motif", "p_adjusted"], errors="ignore")
                .mean(axis=1)
            )
            top_rf[["#motif", "score"]].to_csv(
                getattr(output, arm), sep="\t", index=False,
            )


rule read_counts:
    input: bam=f"{DATA_DIR}/PacBio/tailpuller.bam",
    output: tsv=DATA_DIR+"/PacBio/counts-{arm}.tsv",
    run:
        if wildcards.arm == "p_arm":
            flags = "-f0x4000 -F0x8000"
        elif wildcards.arm == "q_arm":
            flags = "-f0x4000 -f0x8000"
        else:
            raise ValueError(f"arm=='{wildcards.arm}'")
        cmd = " | ".join([
            f"samtools view {flags} {input.bam}", r"tr ':' '\t'",
            "cut -f2,6", "sort", "uniq -c",
            r"sed -E 's/^\s*//g; s/\s+/\t/g'"
        ])
        counts_narrow = read_csv(
            StringIO(check_output(cmd, shell=True, universal_newlines=True)),
            sep="\t", names=["count", "subject", "rname"],
        )
        counts = counts_narrow.pivot(
            index="rname", columns="subject", values="count",
        )
        counts.columns.name = None
        counts["total"] = counts.sum(axis=1)
        counts.fillna(0).astype(int).to_csv(output.tsv, sep="\t")


rule kmerscanner_unfiltered:
    input:
        bam=DATA_DIR+"/PacBio/{group}/{subject}/tailpuller.bam",
        tsv=DATA_DIR+"/PacBio/repeatfinder-{arm}-plottable.tsv",
    output:
        dat=DATA_DIR+"/PacBio/{group}/{subject}/kmerscanner-{arm}-unfiltered.dat.gz",
    run:
        flags = get_sam_flags(wildcards.arm, target="tract_anchor")
        shell("""
            ./edgecase kmerscanner --motif-file {input.tsv} -b 10 \
                {flags} {input.bam} | gzip -2 > {output.dat}
        """)


rule kmerscanner_filtered:
    input:
        dat=DATA_DIR+"/PacBio/{group}/{subject}/kmerscanner-{arm}-unfiltered.dat.gz",
        tsv=DATA_DIR+"/PacBio/counts-{arm}.tsv",
    output:
        dat=DATA_DIR+"/PacBio/{group}/{subject}/kmerscanner-{arm}.dat.gz",
    params:
        min_reads=MIN_CHROM_COVERAGE,
    run:
        counts = read_csv(input.tsv, sep="\t", index_col=0)
        raw_densities = read_csv(input.dat, sep="\t")
        chromosomes_to_keep = (
            set(raw_densities["chrom"].drop_duplicates()) &
            set(counts[counts["total"]>=params.min_reads].index)
        )
        filtered_densities = raw_densities[
            raw_densities["chrom"].isin(chromosomes_to_keep)
        ]
        filtered_densities.to_csv(
            output.dat, compression="gzip", sep="\t", index=False,
        )


rule densityplot:
    input:
        dat=DATA_DIR+"/PacBio/{group}/{subject}/kmerscanner-{arm}.dat.gz",
        tsv=DATA_DIR+"/PacBio/counts-{arm}.tsv",
    output:
        pdf=DATA_DIR+"/PacBio/{group}/{subject}/densityplot-{arm}.{outfmt}",
    params:
        min_reads=MIN_CHROM_COVERAGE,
    run:
        counts = read_csv(input.tsv, sep="\t", index_col=0)
        chroms_to_plot = ",".join(
            counts[counts["total"]>=params.min_reads].index
        )
        with gzopen(input.dat, mode="rt") as dat:
            for i, _ in enumerate(dat):
                if i > 0:
                    kmerscan_empty = False
                    break
            else:
                kmerscan_empty = True
        if wildcards.outfmt == "pdf":
            if wildcards.arm == "p_arm":
                options = "--palette 'paper|legend=density'"
            else:
                options = "--palette paper"
        elif wildcards.outfmt == "pkl":
            options = "--palette 'paper|legend=full' --plot-coverage"
        else:
            raise ValueError(f"outfmt={wildcards.outfmt}")
        if kmerscan_empty:
            switch_backend("Agg")
            subplots()[0].savefig(output.pdf, bbox_inches="tight")
        else:
            flags = get_sam_flags(wildcards.arm, target="tract_anchor")
            shell("""
                ./edgecase densityplot \
                    -x {HG38EXT_ECX} --title ' ' {flags} -b 100 {options} \
                    --chroms-to-plot '{chroms_to_plot}' \
                    -z {input.dat} --outfmt {wildcards.outfmt} > {output.pdf}
            """)


rule densityplot_all:
    input:
        p_arm_pdf=[
            DATA_DIR+f"/PacBio/{group}/{subject}/densityplot-p_arm.pdf"
            for _, (group, subject)
            in DATASETS[["group", "subject"]].drop_duplicates().iterrows()
        ],
        q_arm_pdf=[
            DATA_DIR+f"/PacBio/{group}/{subject}/densityplot-q_arm.pdf"
            for _, (group, subject)
            in DATASETS[["group", "subject"]].drop_duplicates().iterrows()
        ],
        p_arm_pkl=[
            DATA_DIR+f"/PacBio/{group}/{subject}/densityplot-p_arm.pkl"
            for _, (group, subject)
            in DATASETS[["group", "subject"]].drop_duplicates().iterrows()
        ],
        q_arm_pkl=[
            DATA_DIR+f"/PacBio/{group}/{subject}/densityplot-q_arm.pkl"
            for _, (group, subject)
            in DATASETS[["group", "subject"]].drop_duplicates().iterrows()
        ],
